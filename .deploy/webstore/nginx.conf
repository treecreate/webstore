worker_processes 1;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  map $http_accept_language $lang {
    default dk;
    ~*^en-US en-US;
  }

  sendfile on;
  keepalive_timeout 65;

  # Prerender.io lists of user agents - used to determine whether or not to return the normal or prerendered, static version of the page (bots get prerendered)
  map $http_user_agent $prerender_ua {
    default 0;
    "~*Prerender" 0;

    "~*googlebot" 1;
    "~*yahoo!\ slurp" 1;
    "~*bingbot" 1;
    "~*yandex" 1;
    "~*baiduspider" 1;
    "~*facebookexternalhit" 1;
    "~*twitterbot" 1;
    "~*rogerbot" 1;
    "~*linkedinbot" 1;
    "~*embedly" 1;
    "~*quora\ link\ preview" 1;
    "~*showyoubot" 1;
    "~*outbrain" 1;
    "~*pinterest\/0\." 1;
    "~*developers.google.com\/\+\/web\/snippet" 1;
    "~*slackbot" 1;
    "~*vkshare" 1;
    "~*w3c_validator" 1;
    "~*redditbot" 1;
    "~*applebot" 1;
    "~*whatsapp" 1;
    "~*flipboard" 1;
    "~*tumblr" 1;
    "~*bitlybot" 1;
    "~*skypeuripreview" 1;
    "~*nuzzel" 1;
    "~*discordbot" 1;
    "~*google\ page\ speed" 1;
    "~*qwantify" 1;
    "~*pinterestbot" 1;
    "~*bitrix\ link\ preview" 1;
    "~*xing-contenttabreceiver" 1;
    "~*chrome-lighthouse" 1;
    "~*telegrambot" 1;
    "~*seobilitybot" 1;
  }

  map $args $prerender_args {
    default $prerender_ua;
    "~(^|&)_escaped_fragment_=" 1;
  }

  map $http_x_prerender $x_prerender {
    default $prerender_args;
    "1" 0;
  }

  map $uri $prerender {
    default $x_prerender;
    "~*\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)" 0;
  }

  server {
    listen 80;
    root /usr/share/nginx/html;
    index index.html;

    # Redirect requests to a localized uri
    location = / {
      return 302 /$lang/;
    }

    # Redirect the assets request to their language-specific uri
    location ~^/assets {
      if ($prerender = 1) {
        rewrite (.*) /prerenderio last;
      }
      return 302 /$lang$uri;
    }

    location ~^/en-US {
      # If the user agent is a crawling bot, return a prerendered version
      if ($prerender = 1) {
        rewrite (.*) /prerenderio last;
      }
      # Return normal files
      try_files $uri $uri/ /en-US/index.html;
    }

    location ~^/dk {
      # If the user agent is a crawling bot, return a prerendered version
      if ($prerender = 1) {
        rewrite (.*) /prerenderio last;
      }
      # Return normal files
      try_files $uri $uri/ /dk/index.html;
    }

    location /prerenderio {
      # In case the URI incorrectly triggered the prerended logic return 404
      if ($prerender = 0) {
        return 404;
      }

      # Prerender.io Token that gets replaced in the Dockerfile
      proxy_set_header X-Prerender-Token $PRERENDER_IO_TOKEN;

      proxy_hide_header Cache-Control;
      add_header Cache-Control "private,max-age=600,must-revalidate";

      # Resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
      resolver 8.8.8.8 8.8.4.4;
      set $prerender_host "service.prerender.io";
      proxy_pass https://$prerender_host;
      rewrite .* /$scheme://$host$request_uri? break;
    }
  }
}